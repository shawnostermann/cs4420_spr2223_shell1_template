%{
#include <stdio.h>
#include "parencalc.h"

/* some internal files generated by bison */
int yylex();
void yyerror(const char *s,...);
void yywarn(const char *s,...);

/* include debugging code, in case we want it */
#define YYDEBUG 1

%}


%union	{ /* the types that we use in the tokens */
    int number;
    int op;
    struct exprtree *pexpr;
}



%token EOLN PLUS MINUS TIMES DIVIDE LPAREN RPAREN
%token <number> NUMBER  
  
%type <pexpr> expr term
%type <op> oper
  

%% 	/* beginning of the parsing rules	*/
input	: lines
	|
  	;

lines	: oneline EOLN
	| oneline EOLN lines
	;

oneline : term
		{ doline($1); }
	| error
	/* if we got an error on the line, don't call the C program */
	;

term	: NUMBER
	  {
	      struct exprtree *pexpr;

	      pexpr = (struct exprtree *) MallocZ(sizeof(struct exprtree));
	      pexpr->left = pexpr->right = NULL;
	      pexpr->number = $1;
	      $$ = pexpr;
	  }
	| LPAREN expr RPAREN
	  { $$ = $2; }
	;

expr	: term oper term
	  {
	      struct exprtree *pexpr;

	      pexpr = (struct exprtree *) MallocZ(sizeof(struct exprtree));
	      pexpr->left = $1;
	      pexpr->right = $3;
	      pexpr->operator = $2;
	      $$ = pexpr;
	  }

/* one of the 4 operators we understand */
oper	: PLUS		{ $$ = PLUS;}
	| MINUS		{ $$ = MINUS;}
	| TIMES		{ $$ = TIMES;}
	| DIVIDE	{ $$ = DIVIDE;}
	;

%%

void yyerror(const char *s,...)
{
	fprintf(stderr, "parser: Bad syntax (%s)\n", s);
}

#include <stdlib.h>
#include <string.h>
void *
MallocZ (int nbytes)
{
    char *ptr = malloc(nbytes);
    if (ptr == NULL)
	{
	    perror ("MallocZ failed, fatal\n");
	    exit (66);
	}

	// initialize the space to all zeroes
    memset (ptr, '\00', nbytes);

    return (ptr);
}
